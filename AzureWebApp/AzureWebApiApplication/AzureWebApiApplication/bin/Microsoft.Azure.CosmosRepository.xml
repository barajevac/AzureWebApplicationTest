<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.CosmosRepository</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.CosmosRepository.Attributes.PartitionKeyPathAttribute">
            <summary>
            The partition key path attribute exposes the ability to declaratively
            specify an <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> partition key path. This attribute should be used in
            conjunction with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> on the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> property
            whose value will act as the partition key. Partition key paths should start with "/",
            for example "/partition". For more information,
            see https://docs.microsoft.com/azure/cosmos-db/partitioning-overview.
            </summary>
            <remarks>
            By default, "/id" is used.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Attributes.PartitionKeyPathAttribute.Path">
            <summary>
            Gets or sets the path of the parition key.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Attributes.PartitionKeyPathAttribute.#ctor(System.String)">
            <summary>
            Constructor accepting the <paramref name="path"/> of the partition key for a given <see cref="T:Microsoft.Azure.CosmosRepository.Item"/>.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.DefaultRepository`1">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.GetAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.GetByQueryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepository`1.DeleteAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.DefaultRepositoryFactory">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepositoryFactory.#ctor(System.IServiceProvider)">
            <summary>
            Constructor for the default repository factory.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.DefaultRepositoryFactory.RepositoryOf``1">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Extensions.ExpressionExtensions">
            <summary>
            Borrowed from:
            https://docs.microsoft.com/en-us/archive/blogs/meek/linq-to-entities-combining-predicates
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Extensions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.IRepository`1">
            <summary>
            This is the repository interface for any implementation of 
            <typeparamref name="TItem"/>, exposing asynchronous C.R.U.D. functionality.
            </summary>
            <typeparam name="TItem">The <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass type.</typeparam>
            <example>
            With DI, use .ctor injection to require any subclass of <see cref="T:Microsoft.Azure.CosmosRepository.Item"/>:
            <code language="c#">
            <![CDATA[
            public class ConsumingService
            {
                readonly IRepository<SomePoco> _pocoRepository;
                
                public ConsumingService(IRepository<SomePoco> pocoRepository) =>
                    _pocoRepository = pocoRepository;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/> that corresponds to the given <paramref name="id"/>.
            </summary>
            <remarks>
            If the typeof(<typeparamref name="TItem"/>).Name differs from the item.Type you're attempting to retrieve, null is returned.
            </remarks>
            <param name="id">The string identifier.</param>
            <param name="partitionKeyValue">The partition key value if different than the <see cref="P:Microsoft.Azure.CosmosRepository.Item.Id"/>.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.GetAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/> that corresponds to the given <paramref name="id"/>.
            </summary>
            <remarks>
            If the typeof(<typeparamref name="TItem"/>).Name differs from the item.Type you're attempting to retrieve, null is returned.
            </remarks>
            <param name="id">The string identifier.</param>
            <param name="partitionKey">The <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/> value if different than the <see cref="P:Microsoft.Azure.CosmosRepository.Item.Id"/>.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> 
            subclasses that match the given <paramref name="predicate"/>.
            </summary>
            <remarks>
            If the typeof(<typeparamref name="TItem"/>).Name differs from the item.Type you're attempting to retrieve, the item is not returned.
            </remarks>
            <param name="predicate">The expression used for evaluating a matching item.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A collection of item instances who meet the <paramref name="predicate"/> condition.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.GetByQueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of <see cref="T:Microsoft.Azure.CosmosRepository.Item" />
            by the given Cosmos SQL query
            </summary>
            <param name="query">The Cosmos SQL query</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A collection of item instances returned by the given <paramref name="query"/> Cosmos SQL query.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a cosmos item representing the given <paramref name="value"/>.
            </summary>
            <param name="value">The item value to create.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Creates one or more cosmos item(s) representing the given <paramref name="values"/>.
            </summary>
            <param name="values">The item values to create.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A collection of created item instances.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the cosmos object that corresponds to the given <paramref name="value"/>.
            </summary>
            <param name="value">The item value to update.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> subclass instance as a <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes the cosmos object that corresponds to the given <paramref name="value"/>.
            </summary>
            <param name="value">The object to delete.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the cosmos object that corresponds to the given <paramref name="id"/>.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="partitionKeyValue">The partition key value if different than the <see cref="P:Microsoft.Azure.CosmosRepository.Item.Id"/>.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepository`1.DeleteAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <summary>
            Deletes the cosmos object that corresponds to the given <paramref name="id"/>.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="partitionKey">The <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/> value if different than the <see cref="P:Microsoft.Azure.CosmosRepository.Item.Id"/>.</param>
            <param name="cancellationToken">The cancellation token to use when making asynchronous operations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.IRepositoryFactory">
            <summary>
            A factory abstraction for a component that can
            create <see cref="T:Microsoft.Azure.CosmosRepository.IRepository`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.IRepositoryFactory.RepositoryOf``1">
            <summary>
            Gets an <see cref="T:Microsoft.Azure.CosmosRepository.IRepository`1"/> instance for the
            given <typeparamref name="TItem"/> type.
            </summary>
            <typeparam name="TItem">The item type that corresponds to the respoitory.</typeparam>
            <returns>An <see cref="T:Microsoft.Azure.CosmosRepository.IRepository`1"/> of <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Item">
            <summary>
            The base item used for all repository object or object graphs.
            </summary>
            <example>
            Here is an example subclass item, which adds several properties:
            <code language="c#">
            <![CDATA[
            public class SubItem : Item
            {
                public DateTimeOffset Date { get; set; }
                public string Name { get; set; }
                public IEnumerable<Child> Children { get; set; }
                public IEnumerable<string> Tags { get; set; }
            }
            
            public class Child
            {
                public string Name { get; set; }
                public DateTime BirthDate { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Item.Id">
            <summary>
            Gets or sets the item's globally unique identifier.
            </summary>
            <remarks>
            Initialized by <see cref="M:System.Guid.NewGuid"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Item.Type">
            <summary>
            Gets or sets the item's type name.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Item.#ctor">
            <summary>
            Default constructor, assigns type name to <see cref="P:Microsoft.Azure.CosmosRepository.Item.Type"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Item.GetPartitionKeyValue">
            <summary>
            Gets the partition key value for the given <see cref="T:Microsoft.Azure.CosmosRepository.Item"/> type.
            When overridden, be sure that the <see cref="P:Microsoft.Azure.CosmosRepository.Attributes.PartitionKeyPathAttribute.Path"/> value corresponds
            to the <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName"/> value, i.e.; "/partition" and "partition"
            respectively. If these two values do not correspond an error will occur.
            </summary>
            <returns>The <see cref="P:Microsoft.Azure.CosmosRepository.Item.Id"/> unless overridden by the subclass.</returns>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions">
            <summary>
            A repository options class, representing 
            various Azure Cosmos DB configuration settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.CosmosConnectionString">
            <summary>
            Gets or sets the cosmos connection string. Primary or secondary connection strings are valid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.DatabaseId">
            <summary>
            Gets or sets the name identifier for the cosmos database.
            </summary>
            <remarks>
            Defaults to "database", unless otherwise specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.ContainerId">
            <summary>
            Gets or sets the name identifier for the cosmos container that corresponds to the <see cref="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.DatabaseId"/>.
            </summary>
            <remarks>
            Defaults to "container", unless otherwise specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.OptimizeBandwidth">
            <summary>
            Gets or sets whether to optimize bandwidth.
            When false, the <see cref="P:Microsoft.Azure.Cosmos.ItemRequestOptions.EnableContentResponseOnWrite"/> is set to false and only
            headers and status code in the Cosmos DB response for write item operation like Create, Upsert,
            Patch and Replace. This reduces networking and CPU load by not sending the resource back over the
            network and serializing it on the client.
            </summary>
            <remarks>
            Defaults to true, see: https://devblogs.microsoft.com/cosmosdb/enable-content-response-on-write
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.ContainerPerItemType">
             <summary>
             Gets or sets whether to create a container per item. When true, a container for type `Foo` will be persisted in
             a "Foo" container, and type `Bar` will be persisted in a "Bar" container, and so on. When false, all items share
             a container - because it doesn't really matter.
             </summary>
             <remarks>
            Defaults to false, see: https://docs.microsoft.com/azure/cosmos-db/how-to-model-partition-example?WC.m_id=dapine
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions.AllowBulkExecution">
            <summary>
            Gets or sets whether optimistic batching of service requests occurs. Setting this option might
            impact the latency of the operations. Hence this option is recommended for non-latency
            sensitive scenarios only.
            </summary>
            <remarks>
            Defaults to false, see: https://devblogs.microsoft.com/cosmosdb/introducing-bulk-support-in-the-net-sdk
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientOptionsProvider">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientOptionsProvider.ClientOptions">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientOptionsProvider.#ctor(System.IServiceProvider,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Default <see cref="T:Microsoft.Azure.CosmosRepository.Providers.ICosmosClientOptionsProvider"/> implementation.
            </summary>
            <param name="serviceProvider">Service provider implementation.</param>
            <param name="configuration">Service configuration implementation.</param>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientProvider">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientProvider.#ctor(Microsoft.Azure.Cosmos.CosmosClientOptions,Microsoft.Extensions.Options.IOptions{Microsoft.Azure.CosmosRepository.Options.RepositoryOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientProvider.#ctor(Microsoft.Azure.CosmosRepository.Providers.ICosmosClientOptionsProvider,Microsoft.Extensions.Options.IOptions{Microsoft.Azure.CosmosRepository.Options.RepositoryOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientProvider.UseClientAsync``1(System.Func{Microsoft.Azure.Cosmos.CosmosClient,System.Threading.Tasks.Task{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosClientProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosContainerProvider`1">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosContainerProvider`1.GetContainerAsync">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosPartitionKeyPathProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.DefaultCosmosPartitionKeyPathProvider.GetPartitionKeyPath``1">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.ICosmosClientOptionsProvider">
            <summary>
            The cosmos client options provider exposes a means of providing
            an instance to the configured <see cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/> object,
            which is shared.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CosmosRepository.Providers.ICosmosClientOptionsProvider.ClientOptions">
            <summary>
            Gets the configured <see cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/> instance.
            </summary>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.ICosmosClientProvider">
            <summary>
            The cosmos client provider exposes a means of providing
            an instance to the configured <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/> object,
            which is shared.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.ICosmosContainerProvider`1">
            <summary>
            The cosmos container provider exposes a means of providing
            an instance to the configured <see cref="T:Microsoft.Azure.Cosmos.Container"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.ICosmosContainerProvider`1.GetContainerAsync">
            <summary>
            Asynchronously gets the configured <see cref="T:Microsoft.Azure.Cosmos.Container"/> instance that corresponds to the 
            cosmos <see cref="T:Microsoft.Azure.CosmosRepository.Options.RepositoryOptions"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.Container"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.CosmosRepository.Providers.ICosmosPartitionKeyPathProvider">
            <summary>
            The cosmos partition key path provider exposes the ability 
            to get an <see cref="T:Microsoft.Azure.CosmosRepository.Item"/>'s partition key path.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CosmosRepository.Providers.ICosmosPartitionKeyPathProvider.GetPartitionKeyPath``1">
            <summary>
            Gets the partition key path for a given <typeparamref name="TItem"/> type.
            </summary>
            <typeparam name="TItem">The item for which the partition key path corresponds.</typeparam>
            <returns>A string value representing the partition key path, i.e.; "/partion"</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extension methods for adding and configuring the Azure Cosmos DB services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCosmosRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Azure.CosmosRepository.Options.RepositoryOptions})">
            <summary>
            Adds the services required to consume any number of <see cref="T:Microsoft.Azure.CosmosRepository.IRepository`1"/> 
            instances to interact with Cosmos DB.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="setupAction">An action to configure the repository options</param>
            <returns>The same service collection that was provided, with the required cosmos services.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCosmosRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Azure.CosmosRepository.Options.RepositoryOptions})">
            <summary>
            Adds the services required to consume any number of <see cref="T:Microsoft.Azure.CosmosRepository.IRepository`1"/> 
            instances to interact with Cosmos DB.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The configuration representing the applications settings.</param>
            <param name="setupAction">An action to configure the repository options</param>
            <returns>The same service collection that was provided, with the required cosmos services.</returns>
        </member>
    </members>
</doc>
